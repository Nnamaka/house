// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String? 
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  quotes        QuoteRequest[]
  listings      TinyHouse[]    // For admin users who create listings
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tiny House Models
model TinyHouse {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  squareFeet  Int
  bedrooms    Int
  bathrooms   Int
  features    String[]
  images      String[] // URLs to images
  status      ListingStatus @default(AVAILABLE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Metadata
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  
  // Relations
  quotes      QuoteRequest[]

  @@index([status])
}

enum ListingStatus {
  AVAILABLE
  SOLD
  HIDDEN
}

model QuoteRequest {
  id        String   @id @default(cuid())
  status    QuoteStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User Information (could be different from auth user)
  userId    String?  // Optional: user might not be logged in
  user      User?    @relation(fields: [userId], references: [id])
  
  // Required contact information
  fullName  String
  email     String
  phone     String
  message   String   @db.Text

  // Financing Information
  preferredFinancing FinancingType?
  desiredMoveInDate  DateTime?
  estimatedBudget    Decimal?     @db.Decimal(10, 2)

  // Related House
  houseId   String
  house     TinyHouse @relation(fields: [houseId], references: [id])

  // Admin notes
  adminNotes String? @db.Text

  @@index([status])
  @@index([email])
}

enum QuoteStatus {
  PENDING
  REVIEWED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FinancingType {
  CASH
  MORTGAGE
  LEASE_TO_OWN
  UNDECIDED
}

model House {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  images      String[]
  features    String[]
}

model MagicLink {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
}
